import mysql.connector

# Conectar a la base de datos MySQL
conn = mysql.connector.connect(
    host='localhost',
    user='root',     # Cambia esto a tu usuario de MySQL
    password='1234', # Cambia esto a tu contraseña de MySQL
    database='paises'
)
cursor = conn.cursor()

# Crear tablas si no existen
cursor.execute('''
CREATE TABLE IF NOT EXISTS paises (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS limitrofes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    pais_id INT NOT NULL,
    limitrofe_id INT NOT NULL,
    FOREIGN KEY (pais_id) REFERENCES paises(id),
    FOREIGN KEY (limitrofe_id) REFERENCES paises(id)
)
''')

conn.commit()

# Definir la clase Paises
class Paises:
    def __init__(self, nombre):
        self.nombre = nombre

    def guardar(self):
        cursor.execute('INSERT INTO paises (nombre) VALUES (%s)', (self.nombre,))
        conn.commit()

    @staticmethod
    def obtener_todos():
        cursor.execute('SELECT * FROM paises')
        return cursor.fetchall()

    @staticmethod
    def obtener_por_id(pais_id):
        cursor.execute('SELECT * FROM paises WHERE id = %s', (pais_id,))
        return cursor.fetchone()

    def agregar_limitrofe(self, limitrofe_id):
        pais_id = self.obtener_id()
        cursor.execute('INSERT INTO limitrofes (pais_id, limitrofe_id) VALUES (%s, %s)', (pais_id, limitrofe_id))
        conn.commit()

    def listar_limitrofes(self):
        pais_id = self.obtener_id()
        cursor.execute('''
            SELECT p.nombre FROM paises p
            JOIN limitrofes l ON p.id = l.limitrofe_id
            WHERE l.pais_id = %s
        ''', (pais_id,))
        limitrofes = cursor.fetchall()
        for limitrofe in limitrofes:
            print(limitrofe[0])

    def obtener_id(self):
        cursor.execute('SELECT id FROM paises WHERE nombre = %s', (self.nombre,))
        return cursor.fetchone()[0]

# Funciones del menú
def consultarpaises():
    print("Los paises a seleccionar son: ")
    paises = Paises.obtener_todos()
    for n, pais in enumerate(paises):
        print(f"{n}. {pais[1]}")
    x = int(input('Escriba el numero del pais elegido: '))
    pais_seleccionado = paises[x]
    print(f"{pais_seleccionado[1]} Limita con: ")
    pais_obj = Paises(pais_seleccionado[1])
    pais_obj.listar_limitrofes()

def paiseslimitrofes(n, i):
    paises = Paises.obtener_todos()
    pais_principal = paises[n]
    pais_limitrofe = paises[i]
    pais_obj = Paises(pais_principal[1])
    pais_obj.agregar_limitrofe(pais_limitrofe[0])

def asignarlimitrofes():
    print("Los paises a seleccionar son: ")
    paises = Paises.obtener_todos()
    for n, pais in enumerate(paises):
        print(f"{n}. {pais[1]}")
    n = int(input('Escriba el numero del pais elegido: '))
    i = int(input("Escriba el número del pais limitrofe: "))
    paiseslimitrofes(n, i)
    print(f"Se agrego a {paises[i][1]} como limitrofe de {paises[n][1]}")

def agregarpaises():
    nuevopais = input("Escriba el nombre del pais a agregar: ")
    nuevopais = nuevopais.capitalize()
    pais_obj = Paises(nuevopais)
    pais_obj.guardar()
    print(f"Se agrego: {nuevopais}")

def menu():
    print("Menu")
    print("1. CONSULTAR PAIS")
    print("2. AGREGAR PAIS")
    print("3. ASIGNAR LIMITROFES")
    print("4. SALIR")
    op = int(input("Digite opcion: "))
    salir = 4
    while op != salir:
        if op == 1:
            consultarpaises()
        elif op == 2:
            agregarpaises()
        elif op == 3:
            asignarlimitrofes()
        elif op == 4:
            exit()
        op = int(input("Digite opcion: "))

# Inicialización de datos
def inicializar_datos():
    cursor.execute('SELECT COUNT(*) FROM paises')
    if cursor.fetchone()[0] == 0:
        nombres_paises = ["Argentina", "Bolivia", "Paraguay", "Brasil", "Uruguay", "Chile", "Peru", "Ecuador", "Colombia", "Venezuela", "Guyana", "Suriname", "Guayana Francesa", "Panama"]
        for nombre in nombres_paises:
            pais = Paises(nombre)
            pais.guardar()

# Inicializar datos y ejecutar el menú
inicializar_datos()
menu()

# Cerrar la conexión al finalizar
conn.close()
